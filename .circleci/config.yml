# Golang CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-go/ for more details
version: 2
jobs:
  build:
    working_directory: /go/src/extract-blocks
    docker:
      # specify the version
      - image: circleci/golang:1.9
    environment:
      PACKAGE_PATH: ${GOPATH}/src/extract-blocks
      # Specify service dependencies here if necessary
      # CircleCI maintains a library of pre-built images
      # documented at https://circleci.com/docs/2.0/circleci-images/
      # - image: circleci/postgres:9.4
    #### TEMPLATE_NOTE: go expects specific checkout path representing url
    #### expecting it in the form of
    ####   /go/src/github.com/circleci/go-tool
    ####   /go/src/bitbucket.org/circleci/go-tool
    steps:
      - checkout
      # - run: env
      - restore_cache:
          keys:
            - v1-pkg-cache
      # specify any bash command here prefixed with `run: `
      ## - run: go get -v -t -d ./...
      ## - run: go test -v ./...
      # - go get -v
      # - go build -v
      # - go build -v -o $(basename $PWD) main.go
      - run: go install extract-blocks/extract-blocks
      - save_cache:
          key: v1-pkg-cache
          paths:
            - "/go/pkg"
      - run: ./bin/upx --best --lzma "${GOPATH}/bin/extract-blocks"
      - run:
          name: Run all tests
          command: |
            extract-blocks run -t -v tests/demo.xlsx
            extract-blocks run -t -v tests/test_floats.xlsx
            extract-blocks comment -t -v tests/commenting.test.xlsx
            go test -v -short ./...
      - run:
          name: Upload the buid
          command: |
            OUTPUT="${GOPATH}/bin/extract-blocks"
            [ "${CIRCLE_BRANCH}" == "master" ] || OUTPUT="${OUTPUT}-${CIRCLE_BRANCH}"
            curl -X POST "https://${BB_AUTH_STRING}@api.bitbucket.org/2.0/repositories/${CIRCLE_PROJECT_USERNAME}/${CIRCLE_PROJECT_REPONAME}/downloads" --form files=@"${OUTPUT}"
